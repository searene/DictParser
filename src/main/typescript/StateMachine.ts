import { WordTree } from './Tree';
/** An abstract class which is used to read and construct
 * a tree from dictionary contents.
 *
 * Created by searene on 5/13/17.
 */

export abstract class StateMachine {

    constructor(input: string) {
        this._input = input;
    }

    /** Run the state machine and get the result
     * generated by it.
     *
     * @returns {WordTree} result generated by the state machine
     */
    run(): WordTree {

        // propel state machine
        this.states[this._initialState]();

        // state machine is completed, the generated tree
        // is stored in this._output, let's fetch it
        return this._output;
    }

    /* input to the state machine, it should be a word entry
     */
    protected _input: string;

    /* output generated by the state machine, it's a map

        key: entry list
        value: Tree built by the word definition
     */
    protected _output: WordTree;

    // function name of the initial state
    protected _initialState: string = 'initial';

    // function name of the completed state
    protected _completedState: string = 'completed';

    /** states are a list of functions, the name of each function
     * is the state name, each function has a return value, which
     * represents the next state's function
     */
    protected abstract states: {[state: string]: () => void}
}
